<?php

    ///////////////////////////////////////////////////
    //                  COPYRIGHT                    //
    //                                               //
    // DEVELOPPED BY ARREA LTD                       //
    // all rights reserved                           //
    // Please read and agree with software           //
    // application license                           //
    ///////////////////////////////////////////////////

/**
 * @file
 *  module sales.
 */

use Drupal\charts\Charts\ModuleSelector;
use Drupal\Core\Database\Database;
use Drupal\Component\Plugin\Exception\PluginNotFoundException;


/**
 * Implementation hook_ek_settings().
 * 
 */ 
 function ek_sales_ek_settings($coids) {
   
    foreach($coids as $key => $id) {

        $query = Database::getConnection('external_db', 'external_db')
                        ->select('ek_sales_settings', 'd');
        $query->fields('d', ['coid', 'settings']);
        $query->condition('coid', $id);
        $data = $query->execute()->fetchObject();
        $settings = unserialize($data->settings);

        if(empty($settings)) {
            $link = \Drupal\Core\Url::fromRoute('ek_sales_settings', array(), array())->toString();
            $message = t('Missing settings for module @m. Go <a href="@c">here</a> to edit.', ['@c' => $link, '@m' => 'sales']);
            drupal_set_message($message, 'warning');
        }        
        
    }

  
    return new \Symfony\Component\HttpFoundation\Response('', 204);
     
 }
 
/**
 * Implementation hook download.
 */
function ek_sales_file_download($uri) {
  if (strpos($uri,'/sales/')) {
    if (\Drupal::currentUser()->hasPermission('create_purchase'))  {
        return array('Content-Type' => \Drupal::service('file.mime_type.guesser')->guess($uri));
        }
  }
}


/**
 * Implementation hook_theme().
 */
function ek_sales_theme() {
  //variables charts api  
  $vars = [
    'library' => '',
    'categories' => [],
    'seriesData' => [],
    'options' => [],
    'id' => '',
      
  ];
    
  return array(
      // for the dashboard
    'ek_sales_dashboard' => array
    (
      'template' => 'ek_sales_dashboard',
      'variables' => array('items' => array()),
    ),   
    // for the sales data
    'ek_sales_data' => array
    (
      'template' => 'ek_sales_data',
      'variables' => array('items' => array()),
    ),
    'ek_sales_data_charts' => array
    (
      'template' => 'ek_sales_data_charts',
      'variables' => array('items' => array()),
    ),      
    //template for attached docs in sales per address book 
    'ek_sales_documents' => array
    (
      'template' => 'ek_sales_documents',
      'variables' => array('items' => array()),
    ),
    'ek_sales_doc_view' => array
    (
      'template' => 'ek_sales_doc_view',
      'variables' => array('items' => array()),
    ),       
    'iframe' => array
    (
      'template' => 'iframe',
      'variables' => array('items' => array()),
    ),
    //charts from charts api
    'charts_api' => [
      'template' => 'charts_api',
      'variables' => $vars,
    ],
  );     
}

/**
 * Implements template_preprocess_page
 *
 * @param $variables
 */
function template_preprocess_charts_api(&$variables) {
  
  // Charts override settings applied at this point.
  $chartOverridePluginManager = \Drupal::service('plugin.manager.charts_override');
  $plugin_definition = [];
  $chartOverrideOptions = [];
  try {
    $plugin_definition = $chartOverridePluginManager->getDefinition($variables['library'] . '_overrides');
    if (!empty($plugin_definition)) {
      $chartOverridePlugin = $chartOverridePluginManager->createInstance($variables['library'] . '_overrides');
      $chartOverrideOptions = $chartOverridePlugin->chartOverrides($variables['options']);
    }
  } catch (PluginNotFoundException $e) {
    \Drupal::service('messenger')
      ->addMessage(t('Exception...' . $e->getMessage()));
  }

  $plugin_manager = \Drupal::service('plugin.manager.charts');
  $plugin = $plugin_manager->createInstance($variables['library']);
  $plugin->buildVariables($variables['options'], $variables['categories'], $variables['seriesData'], [], $variables, $variables['id'], $chartOverrideOptions);
}

/**
 * Implements hook_views_data().
 */
 function ek_sales_views_data() {
     
    $data['ek_sales_invoice']['table']['group'] = t('ek invoices');
    $data['ek_sales_invoice']['table']['base'] = array(
    'field' => 'id', // This is the identifier field for the view.
    'title' => t('ek sales invoices'),
    'help' => t('Sales invoices data'),
    'database' => 'external_db',
    'weight' => -11,
    );  

    $data['ek_sales_invoice']['id'] = array(
        'title' => t('Invoice unique id'),
        'help' => t('Invoice unique id'),
        'field' => array('id' => 'numeric',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'numeric',),
    );
    $data['ek_sales_invoice']['serial'] = array(
        'title' => t('Serial number'),
        'help' => t('Serial number'),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
        'argument' => array('id' => 'string',),
    );
    $data['ek_sales_invoice']['do_no'] = array(
        'title' => t('Delivery order ref. number'),
        'help' => t('Delivery order ref. number'),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
        'argument' => array('id' => 'string',),
    );
    $data['ek_sales_invoice']['head'] = array(
        'title' => t('Header reference'),
        'help' => t('Header name'),
        'field' => array('id' => 'standard', ),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'numeric',), 
        'relationship' => array(
            'base' => 'ek_company', // The name of the table to join with
            'field' => 'head', // The name of the field to join with
            'id' => 'standard',
            'label' => t('Company ref'),
            'type' => 'INNER',
          ),   
    );
    $data['ek_sales_invoice']['allocation'] = array(
        'title' => t('Allocation id reference'),
        'help' => t('Allocation id reference'),
        'field' => array('id' => 'numeric',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'numeric',),
        'relationship' => array(
            'base' => 'ek_company', // The name of the table to join with
            'field' => 'allocation', // The name of the field to join with
            'id' => 'standard',
            'label' => t('Company ref'),
          ),
    );
    $data['ek_sales_invoice']['status'] = array(
        'title' => t('Payment status'),
        'help' => t('Payment status: 0 = unpaid, 1 = paid, 2 = partially paid'),
        'field' => array('id' => 'numeric',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'numeric',),
    );
    $data['ek_sales_invoice']['client'] = array(
        'title' => t('Client'), 
        'help' => t('Client from address book'), 
        'field' => array('id' => 'standard', ),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'numeric',), 
        'relationship' => array(
            'base' => 'ek_address_book', // The name of the table to join with
            'field' => 'client', // The name of the field to join with
            'id' => 'standard',
            'label' => t('Address book ref'),
          ),     
  
    );
    if(\Drupal::moduleHandler()->moduleExists('ek_logistics')) {
        $data['ek_sales_invoice']['do_no'] = array(
            'title' => t('Delivery order ref. number'),
            'help' => t('Delivery order ref. number'),
            'field' => array('id' => 'standard',),
            'sort' => array('id' => 'standard',),
            'filter' => array('id' => 'string',),
            'argument' => array('id' => 'string',),
            'relationship' => array(
                'base' => 'ek_logi_delivery', // The name of the table to join with
                'field' => 'do_no', // The name of the field to join with
                'id' => 'standard',
                'base field' => 'serial',
                'label' => t('Logisitics'),
            ),  
        );
    }
    if(\Drupal::moduleHandler()->moduleExists('ek_projects')) {
        $data['ek_sales_invoice']['pcode'] = array(
            'title' => t('Project code reference'),
            'help' => t('Project code reference'),
            'field' => array('id' => 'standard',),
            'sort' => array('id' => 'standard',),
            'filter' => array('id' => 'string',),
            'argument' => array('id' => 'string',),
            'relationship' => array(
                'base' => 'ek_project', // The name of the table to join with
                'field' => 'pcode', // The name of the field to join with
                'id' => 'standard',
                'base field' => 'pcode',
                'label' => t('Project'),
            ),        
        );
    }
    $data['ek_sales_invoice']['amount'] = array(
        'title' => t('Total value in local currency'),
        'help' => t('Total value in local currency'),
        'field' => array('id' => 'numeric',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'numeric',),
    );
    $data['ek_sales_invoice']['currency'] = array(
        'title' => t('Local currency'),
        'help' => t('Local currency'),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
        'argument' => array('id' => 'string',),
    );
    $data['ek_sales_invoice']['amountbase'] = array(
        'title' => t('Total value in base currency'),
        'help' => t('Total value in base currency'),
        'field' => array('id' => 'numeric',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'numeric',),
    );
    $data['ek_sales_invoice']['amountreceived'] = array(
        'title' => t('Total value paid'),
        'help' => t('Total value paid'),
        'field' => array('id' => 'numeric',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'numeric',),
    );
    $data['ek_sales_invoice']['date'] = array(
        'title' => t('Document date'),
        'help' => t('Document date'),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
        'argument' => array('id' => 'string',),
    );
    $data['ek_sales_invoice']['amountreceived'] = array(
        'title' => t('Total value paid'),
        'help' => t('Total value paid'),
        'field' => array('id' => 'numeric',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'numeric',),
    );
    $data['ek_sales_invoice']['due'] = array(
        'title' => t('Invoice due terms in days'),
        'help' => t('Invoice due terms in days'),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
        'argument' => array('id' => 'string',),
    );
    $data['ek_sales_invoice']['title'] = array(
        'title' => t('Document title'),
        'help' => t('Document title'),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
        'argument' => array('id' => 'string',),
    );
    $data['ek_sales_invoice']['comment'] = array(
        'title' => t('Document open comments'),
        'help' => t('Document open comments'),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
        'argument' => array('id' => 'string',),
    );
    
    
    /*
     * Table invoice details
     */
    $data['ek_sales_invoice_details']['table']['group'] = t('ek invoiced items details');

    $data['ek_sales_invoice_details']['table']['base'] = array(
        'field' => 'id', // This is the identifier field for the view.
        'title' => t('ek invoiced items details'),
        'help' => t('ek invoiced items details'),
        'weight' => -11,
        'database' => 'external_db',
    );

    $data['ek_sales_invoice_details']['table']['join'] = array(
        // Index this array by the table name to which this table refers.
        // 'left_field' is the primary key in the referenced table.
        // 'field' is the foreign key in this table.
        'ek_sales_invoice' => array(
          'left_field' => 'serial',
          'field' => 'serial',
          'database' => 'external_db',
        ),
    ); 
    
    $data['ek_sales_invoice_details']['item'] = array(
        'title' => t('Item description or code'),
        'help' => t('Item description or cod'),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
        'argument' => array('id' => 'string',),
    );
     $data['ek_sales_invoice_details']['itemdetail'] = array(
        'title' => t('Extended item description'),
        'help' => t('Extended item description'),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
        'argument' => array('id' => 'string',),
    );   
    $data['ek_sales_invoice_details']['value'] = array(
        'title' => t('Item unit value'),
        'help' => t('Item unit value'),
        'field' => array('id' => 'numeric',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'numeric',),
    );    
    $data['ek_sales_invoice_details']['quantity'] = array(
        'title' => t('Item quantity'),
        'help' => t('Item quantity'),
        'field' => array('id' => 'numeric',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'numeric',),
    );    
    $data['ek_sales_invoice_details']['total'] = array(
        'title' => t('Item total invoiced value (unit value x quantity in local currency)'),
        'help' => t('Item total invoiced value (unit value x quantity in local currency)'),
        'field' => array('id' => 'numeric',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'numeric',),
    ); 
    $data['ek_sales_invoice_details']['totalbase'] = array(
        'title' => t('Item total invoiced value (in base currency)'),
        'help' => t('Item total invoiced value (in base currency)'),
        'field' => array('id' => 'numeric',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'numeric',),
    );
    
    
    
    
    
    
    return $data;
 }

?>