<?php


/**
 * @file
 *  module sales.
 */
use Drupal\Core\Database\Database;
use Drupal\Core\Form\FormStateInterface;
use Drupal\user\UserInterface;
use Drupal\Component\Plugin\Exception\PluginNotFoundException;


/**
 * Implementation hook_ek_settings().
 * 
 */ 
 function ek_sales_ek_settings($coids) {
   
    $flag = 0;
    foreach($coids as $key => $id) {
        $settings = [];
        $query = Database::getConnection('external_db', 'external_db')
                        ->select('ek_sales_settings', 'd');
        $query->fields('d', ['coid', 'settings']);
        $query->condition('coid', $id);
        $data = $query->execute()->fetchObject();
        if($data){
            $settings = unserialize($data->settings);
        }

        if(empty($settings)) {
            $link = \Drupal\Core\Url::fromRoute('ek_sales_settings', array(), array())->toString();
            $flag = 1;
            $_SESSION['install'] = 1;
        }        
        
    }

    if($flag == 1){
        return ['sales' => $link];
    } else {
        return new \Symfony\Component\HttpFoundation\Response('', 204);
    }
     
 }
 
/**
 * Implementation hook download.
 */
function ek_sales_file_download($uri) {
  if (strpos($uri,'/sales/')) {
    if (\Drupal::currentUser()->hasPermission('create_purchase'))  {
        return array('Content-Type' => \Drupal::service('file.mime_type.guesser')->guess($uri));
        }
  }
}

/**
 * Implementation hook ek_home.
 */
function ek_sales_ek_home() {
    $build = [];
    $build[] = [
        'name' => 'feature_1',
        'module' => 'Sales',
        'stamp' => 1583374000,
        'type' => "new",
        'content' => '<a href="/quotations/list">Quotations</a> filter has now extended options by keyword and companies.',
        'footer' => 'March 2020',
    ];
    $build[] = [
        'name' => 'feature_2',
        'module' => 'Sales',
        'stamp' => 1583374000,
        'type' => "new",
        'content' => '<a href="/ek_sales/admin/settings-form-customize">Design</a> '
            . 'pdf documents forms interface.',
        'footer' => 'April 2020',
    ];
    
    $build[] = [
        'name' => 'feature_3_docsearch',
        'module' => 'Sales',
        'stamp' => 1604197000,
        'type' => "new",
        'content' => '<a href="/sales-search-doc-form">Quick search</a> '
            . 'documents linked to Address Book.',
        'footer' => 'November 2020',
    ];
   
    
    return $build;
}

/**
 * Implementation hook_theme().
 */
function ek_sales_theme() {
  //variables charts api  
  $vars = [
    'library' => '',
    'categories' => [],
    'seriesData' => [],
    'options' => [],
    'id' => '',
      
  ];
    
  return array(
      // for the dashboard
    'ek_sales_dashboard' => array
    (
      'template' => 'ek_sales_dashboard',
      'variables' => array('items' => array()),
    ),   
    // for the sales data
    'ek_sales_data' => array
    (
      'template' => 'ek_sales_data',
      'variables' => array('items' => array()),
    ),
    'ek_sales_data_charts' => array
    (
      'template' => 'ek_sales_data_charts',
      'variables' => array('items' => array()),
    ),      
    //template for attached docs in sales per address book 
    'ek_sales_documents' => array
    (
      'template' => 'ek_sales_documents',
      'variables' => array('items' => array()),
    ),
    'ek_sales_doc_view' => array
    (
      'template' => 'ek_sales_doc_view',
      'variables' => array('items' => array()),
    ),       
    'iframe' => array
    (
      'template' => 'iframe',
      'variables' => array('items' => array()),
    ),
    //charts from charts api
    'charts_api' => [
      'template' => 'charts_api',
      'variables' => $vars,
    ],
  );     
}

/**
 * Implements hook_form_ID_alter().
 * manage email alert subscription
 */
function ek_sales_form_user_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
    $user = \Drupal::routeMatch()->getParameter('user');
    if ($user instanceof UserInterface) {
        $userData = \Drupal::service('user.data');
        
        $form['alter_fields']['edit_sales_doc_subscription'] = [
            '#type' => 'checkbox',
            '#title' => t('Subscribe to new and edit sales document alerts'),
            '#default_value' => ($userData->get('ek_alert_subscriptions', $user->id(), 'edit_sales_doc_subscription') == 1) ? 1 : 0,
        ];
        
        $form['alter_fields']['sales_payment_subscription'] = [
            '#type' => 'checkbox',
            '#title' => t('Subscribe to sales payment alerts'),
            '#default_value' => ($userData->get('ek_alert_subscriptions', $user->id(), 'sales_payment_subscription') == 1) ? 1 : 0,
        ];
        
        // Add a submit action.
        $form['actions']['submit']['#submit'][] = '_ek_sales_form_user_form_submit';
        
    }
}

/**
 * Form submit for user_form.
 *
 * @param array $form
 *   
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state interface.
 */
function _ek_sales_form_user_form_submit(array $form, FormStateInterface $form_state) {
    
  $uid = $form_state->getValue('uid'); 
  $userData = \Drupal::service('user.data');
  $userData->set('ek_alert_subscriptions', $uid, 'edit_sales_doc_subscription', $form_state->getValue('edit_sales_doc_subscription'));
  $userData->set('ek_alert_subscriptions', $uid, 'sales_payment_subscription', $form_state->getValue('sales_payment_subscription'));

}


/**
 * Implements template_preprocess_page
 *
 * @param $variables
 */
function template_preprocess_charts_api(&$variables) {
  
  // Charts override settings applied at this point.
  $chartOverridePluginManager = \Drupal::service('plugin.manager.charts_override');
  $plugin_definition = [];
  $chartOverrideOptions = [];
  try {
    $plugin_definition = $chartOverridePluginManager->getDefinition($variables['library'] . '_overrides');
    if (!empty($plugin_definition)) {
      $chartOverridePlugin = $chartOverridePluginManager->createInstance($variables['library'] . '_overrides');
      $chartOverrideOptions = $chartOverridePlugin->chartOverrides($variables['options']);
    }
  } catch (PluginNotFoundException $e) {
    \Drupal::service('messenger')
      ->addMessage(t('Exception...' . $e->getMessage()));
  }

  $plugin_manager = \Drupal::service('plugin.manager.charts');
  $plugin = $plugin_manager->createInstance($variables['library']);
  $plugin->buildVariables($variables['options'], $variables['categories'], $variables['seriesData'], [], $variables, $variables['id'], $chartOverrideOptions);
}

