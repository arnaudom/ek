<?php

use Drupal\Core\Database\Database;

/**
 * @file
 * Install, update and uninstall functions for the ek_sales module.
 */

/**
 * Implements hook_uninstall().
 */
function ek_sales_uninstall() {
  
    $configs = [
        'tour.tour.invoice',
        'tour.tour.invoice_edit',
        'tour.tour.invoice_list',
        'tour.tour.purchase',
        'tour.tour.purchase_list',
        'tour.tour.quotation',
        'tour.tour.quotation_edit',
        'tour.tour.quotation_list',
        'tour.tour.sales_settings_forms',
        'tour.tour.sales_settings_quotation',
        'tour.tour.sales_settings_serial',
    ];
    
    foreach ($configs as $config) {
        // Deleting config.
        \Drupal::configFactory()->getEditable($config)->delete();
    }  
    
  // Clear ek_messaging data out of the cache.
  \Drupal::cache('data')->deleteAll();
}


/**
 * Implements hook_schema().
 * schema installation is not done at install time but wihin the application
 * in a separate database
 */


/**
 * Add new function for displaying invoice in browser and downloading
 * in excel format
 */
function ek_sales_update_8001() {
   \Drupal::service('router.builder')->rebuild(); 
}

/**
 * Add new function for displaying purchases in browser and downloading
 * in excel format
 */
function ek_sales_update_8002() {
   \Drupal::service('router.builder')->rebuild(); 
}


/**
 * Add new function for extracting purchases list
 * in excel format
 */
function ek_sales_update_8003() {
   \Drupal::service('router.builder')->rebuild(); 
}

/**
 * Add aging report for invoices and purchases
 * 
 */
function ek_sales_update_8004() {
   \Drupal::service('router.builder')->rebuild(); 
}


/**
 * Management of debit and credit notes or memos
 * 
 */
function ek_sales_update_8005() {
   
   $schema = Database::getConnection('external_db','external_db')->schema();
   
   if (!$schema->tableExists('ek_sales_invoice')) {
    $query = "RENAME TABLE `ek_invoice` TO `ek_sales_invoice`";
    Database::getConnection('external_db', 'external_db')->query($query);
   }
   if (!$schema->tableExists('ek_sales_purchase')) {
    $query = "RENAME TABLE `ek_purchase` TO `ek_sales_purchase`";
    Database::getConnection('external_db', 'external_db')->query($query);
   }
   if (!$schema->tableExists('ek_sales_quotation')) {
    $query = "RENAME TABLE `ek_quotation` TO `ek_sales_quotation`";
    Database::getConnection('external_db', 'external_db')->query($query);
   }
   if (!$schema->tableExists('ek_sales_invoice_details')) {
    $query = "RENAME TABLE `ek_invoice_details` TO `ek_sales_invoice_details`";
    Database::getConnection('external_db', 'external_db')->query($query);
   }
   if (!$schema->tableExists('ek_sales_purchase_details')) {
    $query = "RENAME TABLE `ek_purchase_details` TO `ek_sales_purchase_details`";
    Database::getConnection('external_db', 'external_db')->query($query);
   }
   if (!$schema->tableExists('ek_sales_quotation_details')) {
    $query = "RENAME TABLE `ek_quotation_details` TO `ek_sales_quotation_details`";
    Database::getConnection('external_db', 'external_db')->query($query);
   }
   if (!$schema->tableExists('ek_sales_quotation_settings')) {
    $query = "RENAME TABLE `ek_quotation_settings` TO `ek_sales_quotation_settings`";
    Database::getConnection('external_db', 'external_db')->query($query);
   }
   if (!$schema->tableExists('ek_sales_invoice_tasks')) {
    $query = "RENAME TABLE `ek_invoice_tasks` TO `ek_sales_invoice_tasks`";
    Database::getConnection('external_db', 'external_db')->query($query);
   }
   if (!$schema->tableExists('ek_sales_purchase_tasks')) {
    $query = "RENAME TABLE `ek_purchase_tasks` TO `ek_sales_purchase_tasks`";
    Database::getConnection('external_db', 'external_db')->query($query);
   }
   
   if(!$schema->fieldExists('ek_sales_invoice', 'type')) {
        $spec = array(
            'description' => 'type 1 invoice, 2 commercial, 4 credit note',
            'type' => 'int',
            'size' => 'small',
            'not null' => TRUE,
            'default' => '1',
            
        );
        $schema->addField('ek_sales_invoice', 'type', $spec);
   
        \Drupal::service('router.builder')->rebuild();
        
        
        Database::getConnection('external_db', 'external_db')
            ->update('ek_sales_invoice')
            ->fields(['type' => 1])
            ->condition('title', t('Invoice'))
            ->execute(); 
        
        Database::getConnection('external_db', 'external_db')
            ->update('ek_sales_invoice')
            ->fields(['type' => 2])
            ->condition('title', t('Commercial invoice'))
            ->execute();
        
        Database::getConnection('external_db', 'external_db')
            ->update('ek_sales_invoice')
            ->fields(['type' => 3])
            ->condition('title', t('Debit note'))
            ->execute();
        
        Database::getConnection('external_db', 'external_db')
            ->update('ek_sales_invoice')
            ->fields(['type' => 4])
            ->condition('title', t('Credit note'))
            ->execute();
    } 
        
     if(!$schema->fieldExists('ek_sales_purchase', 'type')) {   
        $spec = array(
            'description' => 'type 1 purchase, 4 debit note',
            'type' => 'int',
            'size' => 'small',
            'not null' => TRUE,
            'default' => '1',
            
        );
        $schema->addField('ek_sales_purchase', 'type', $spec);
                
        Database::getConnection('external_db', 'external_db')
            ->update('ek_sales_purchase')
            ->fields(['type' => 1])
            ->execute();     
     }
           
    \Drupal::service('router.builder')->rebuild();
        
    return t('Sales tables updated.'); 
    
    
    
}


/**
 * Alter table field for quotations
 * 
 */
function ek_sales_update_8006() {
    $query = "ALTER TABLE `ek_sales_quotation` CHANGE COLUMN `header` `head` TINYINT(3) UNSIGNED NULL DEFAULT NULL AFTER `serial`";
    Database::getConnection('external_db', 'external_db')->query($query);
    return t('Quotation table updated.'); 
}


/**
 * Add new settings for custom serial
 * Change field in quotation table
 */
function ek_sales_update_8007() {
    $query = "ALTER TABLE `ek_sales_settings` CHANGE COLUMN `settings` `settings` BLOB NULL COMMENT 'serialized settings' AFTER `coid`";
    Database::getConnection('external_db', 'external_db')->query($query);
    
    Database::getConnection('external_db', 'external_db')
            ->insert('ek_sales_settings')
            ->fields(['coid' => 0])
            ->execute();
    
    $query ="ALTER TABLE `ek_sales_quotation_details` CHANGE COLUMN `margin` `weight` INT NULL DEFAULT '0' COMMENT 'row weight' AFTER `itemdetails`";
    Database::getConnection('external_db', 'external_db')->query($query);
    
    \Drupal::service('router.builder')->rebuild(); 
    return t('Settings table updated.'); 
}

/**
 * Add quotation excel download route
 * 
 */
function ek_sales_update_8008() {
   \Drupal::service('router.builder')->rebuild(); 
}

/**
 * New route
 * 
*/
function ek_sales_update_8009() {
    \Drupal::service('router.builder')->rebuild();
}


/**
 * Alter table field attributes
 * 
*/
function ek_sales_update_8010() {
    $query = "ALTER TABLE `ek_sales_quotation` CHANGE COLUMN `pcode` `pcode` VARCHAR(45) NULL DEFAULT '' AFTER `title`";
    Database::getConnection('external_db', 'external_db')->query($query);
    
    $query = "ALTER TABLE `ek_sales_quotation` CHANGE COLUMN `comment` `comment` TEXT NULL AFTER `pcode`";
    Database::getConnection('external_db', 'external_db')->query($query);
    
}


/**
 * Add route for sales documents.
 * Alter documents table.
 */
function ek_sales_update_8011() {
    $schema = Database::getConnection('external_db','external_db')->schema();
    if(!$schema->fieldExists('ek_sales_documents', 'folder')) {   
        $spec = array(
            'type' => 'varchar',
            'length' => 255,
            'not null' => FALSE,
            'description' => 'Folder',
        );
        $schema->addField('ek_sales_documents', 'folder', $spec);
    }
     
   \Drupal::service('router.builder')->rebuild(); 
}


/**
 * Add field
 * Alter invoice table.
 */
function ek_sales_update_8012() {
    $schema = Database::getConnection('external_db','external_db')->schema();
    if(!$schema->fieldExists('ek_sales_invoice', 'po_no')) {   
        $spec = array(
            'type' => 'varchar',
            'length' => 50,
            'not null' => FALSE,
            'description' => 'PO number',
        );
        $schema->addField('ek_sales_invoice', 'po_no', $spec);
    }
}
     
