<?php

    ///////////////////////////////////////////////////
    //                  COPYRIGHT                    //
    //                                               //
    // DEVELOPPED BY ARREA LTD                       //
    // all rights reserved                           //
    // Please read and agree with software           //
    // application license                           //
    ///////////////////////////////////////////////////

use Drupal\Core\Database\Database;
use Drupal\ek_projects\ProjectData;

/**
 * @file
 *  module ek_projects
 */

/**
 * Implementation hook_ek_settings().
 * 
 */ 
 function ek_projects_ek_settings($coids) { 
    //we do not use param coids here as settings are global
    $settings = [];
    $query = Database::getConnection('external_db', 'external_db')
                    ->select('ek_project_settings', 'p');
    $query->fields('p', ['coid', 'settings']);
    $query->condition('coid', '0');
    $data = $query->execute()->fetchObject();
    if($data){
        $settings = unserialize($data->settings);
    }
    
    if(isset($settings['code']) && empty($settings['code'])) {
        $_SESSION['install'] = 1;
        $link = \Drupal\Core\Url::fromRoute('ek_projects.settings.serial', array(), array())->toString();
        return ['projects' => $link];
        
    }
  
    return new \Symfony\Component\HttpFoundation\Response('', 204);
     
 }


/**
 * Implementation hook_theme().
 */
function ek_projects_theme() {
  return array(
      // default display
    'ek_projects_default' => array
    (
      'template' => 'ek_projects_default',
      'variables' => array('items' => array()),
    ),
    // for the dashboard
    'ek_projects_dashboard' => array
    (
      'template' => 'ek_projects_dashboard',
      'variables' => array('items' => array()),
    ),   
    // for the project items display
    'ek_projects_view' => array
    (
      'template' => 'ek_projects_view',
      'variables' => array('items' => array()),
    ), 
    //template for attached docs in project page  
    'ek_projects_doc_view' => array
    (
      'template' => 'ek_projects_doc_view',
      'variables' => array('items' => array()),
    ),       
    // for the project calendar block
    'calendar_block' => array
    (
      'template' => 'calendar_block',
      'variables' => array('items' => array()),
    ), 
    'activity_block' => array
    (
      'template' => 'activity_block',
      'variables' => array('items' => array()),
    ), 
    'file_data' => array
    (
      'template' => 'file_data',
      'variables' => array('items' => array()),
    ),  
  );     
}

/**
 * Implementation hook_mail().
 */
function ek_projects_mail($key, &$message, &$params) {
    
    $theme = theme_get_setting('logo');
    global $base_url;
    $params['options']['logo'] = $base_url . $theme['url'];
    $params['options']['site'] = \Drupal::config('system.site')->get('name');
    $params['options']['stamp'] = date('F j, Y, g:i a');
    
    switch($key) {
      case 'project_access':
        $message['subject'] = $params['subject'];
        $render = [
            '#markup' => $params['body'],
        ];
        $message['body'][] = \Drupal::service('renderer')->render($render);  
        $message['options'] = $params['options'];
        break;

      case 'project_note':
        $message['subject'] = $params['subject'];
        $render = [
            '#markup' => $params['body'],
        ];
        $message['body'][] = \Drupal::service('renderer')->render($render);  
        $message['options'] = $params['options'];
        $message['headers']['Disposition-Notification-To'] = $params['from'];
        $message['headers']['X-Confirm-Reading-To'] = $params['from'];
        if($params['options']['priority'] == 1) {
            $message['headers']['Priority'] = 'High';
            $message['headers']['X-Priority'] = '1';
            $message['headers']['X-MSMail-Priority'] = 'Highest';
        } else {
            $message['headers']['Priority'] = 'normal';
            $message['headers']['X-Priority'] = '3';
            $message['headers']['X-MSMail-Priority'] = 'Normal';
        }    
        break;

    }

}
  
/**
 * Implements hook_file_download().
 * edit the file_download function in order to control access of shared files
*/
function ek_projects_file_download($uri) {
    
    //filter uri for document type and source type
    //if extranet type, hook_ in use is extranet hook
    if( strpos($uri , '/projects/documents/') 
            &&  !strpos(\Drupal::request()->server->get('HTTP_REFERER') , '/extranet/project?')
            &&  !strpos(\Drupal::request()->server->get('HTTP_REFERER') , 'extranet-file/')
            &&  !strpos(\Drupal::request()->server->get('HTTP_REFERER') , '/extranet/chat')
            ) { 
        
    $finfo = new finfo(FILEINFO_MIME_TYPE);
    $mime = $finfo->file($uri);
    $query = Database::getConnection('external_db', 'external_db')
                            ->select('ek_project_documents', 'd')
                            ->fields('d',['id','filename'])
                            ->condition('uri', $uri)
                            ->execute();
    $file = $query->fetchObject();
    $name = \Drupal::currentUser()->getAccountName();   
    
     if (ProjectData::validate_file_access($file->id) ) {

                //////////////////////////
                //    WATCHDOG          //
                //////////////////////////

                $a = array('@u' => $name, '@d' => $file->filename, '@i' => $file->id);
                $log = t("User @u has downloaded project document @d (file id @i)", $a);
                \Drupal::logger('ek_projects')->notice( $log );         
                return array('Content-Type' => $mime);

              }  else {
                    //////////////////////////
                    //    WATCHDOG          //
                    //////////////////////////
                    $a = array('@u' => $name, '@d' => $file->filename, '@i' => $file->id);
                    $log = t("User @u tried to downlaod project document @d but access is denied (file id @i)", $a);
                     \Drupal::logger('ek_projects')->notice( $log );  

                    return -1;          
              }
    }

}

/**
 * Implements hook_form_alter().
 */
function ek_projects_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
    
  if ($form_id == 'user_multiple_cancel_confirm') {
    

    $form['project_owner'] = [
      '#type' => 'textfield',
      '#title' => t('Move user project'),
      '#autocomplete_route_name' => 'ek_admin.user_autocomplete',
      '#description' => t('Select to whom to transfer proejct ownership'),
    ];
    $form['#validate'][] = 'ek_projects_form_user_delete_validate';
    $form['#submit'][] = 'ek_projects_form_user_delete_submit';
    
    return $form;
      
  }
} 

/**
 * Implements hook_form_validate().
 */
function ek_projects_form_user_delete_validate(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {

  if ($form['#form_id'] == 'user_multiple_cancel_confirm') {
        if ($form_state->getValue('project_owner') <> '') {
            $query = Database::getConnection()->select('users_field_data', 'u');
            $query->fields('u', ['uid']);
            $query->condition('name', $form_state->getValue('project_owner'));
            $data = $query->execute()->fetchField();
            
            if ($data) {
                $form_state->setValue('move_uid_documents', $data);
            } else {
                $form_state->setErrorByName('project_owner', t('Unknown user to move documents'));
            }
              
        }
    
     return $form;
      
  }
}

/**
 * Implements hook_form_submit().
 */
function ek_projects_form_user_delete_submit(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  
    
    if ($form['#form_id'] == 'user_multiple_cancel_confirm') {

        foreach($form_state->getValue('accounts') as $key => $id) {
            
            $query = Database::getConnection('external_db', 'external_db')
                ->select('ek_project', 'p');
                $query->fields('p',['id','owner', 'share','deny','notify']);
                $data = $query->execute();

            while($d = $data->fetchObject()) {

                $share = explode(',', $d->share);
                $index = array_search($id, $share);
                if($index !== false){
                    unset($share[$index]);
                }
                $share = implode(",", $share);
                
                $deny = explode(',', $d->deny);
                $index = array_search($id, $deny);
                if($index !== false){
                    unset($deny[$index]);
                }
                $deny = implode(",", $deny);
                
                $notify = explode(',', $d->notify);
                $index = array_search($id, $notify);
                if($index !== false){
                    unset($notify[$index]);
                }                  
                $notify = implode(",", $notify);
                
                $update = Database::getConnection('external_db', 'external_db')->update('ek_project')
                    ->condition('id', $d->id)
                    ->fields(['share' => $share,'deny' => $deny,'notify' => $notify])
                    ->execute();
            
                if (is_numeric($form_state->getValue('project_owner')) && $id == $d->owner) {
                    Database::getConnection('external_db', 'external_db')->update('ek_project')
                    ->condition('id', $d->id)
                    ->fields(['owner' => $form_state->getValue('project_owner')])
                    ->execute();
                    
                }
                
            } 
            
                        
        }
       
    \Drupal::messenger()->addStatus(t('Projects updated'));
       
    return $form;
      
  }
} 
