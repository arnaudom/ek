<?php

    ///////////////////////////////////////////////////
    //                  COPYRIGHT                    //
    //                                               //
    // DEVELOPPED BY ARREA LTD                       //
    // all rights reserved                           //
    // Please read and agree with software           //
    // application license                           //
    ///////////////////////////////////////////////////

use Drupal\Core\Database\Database;
use Drupal\ek_projects\ProjectData;

/**
 * @file
 *  module ek_projects
 */

/**
 * Implementation hook_ek_settings().
 * 
 */ 
 function ek_projects_ek_settings($coids) { 
    //we do not use param coids here as settings are global
    $query = Database::getConnection('external_db', 'external_db')
                    ->select('ek_project_settings', 'p');
    $query->fields('p', ['coid', 'settings']);
    $query->condition('coid', '0');
    $data = $query->execute()->fetchObject();
    $settings = unserialize($data->settings);
    
    if(empty($settings['code'])) {
        $link = \Drupal\Core\Url::fromRoute('ek_projects.settings.serial', array(), array())->toString();
        $message = t('Missing settings for module @m. Go <a href="@c">here</a> to edit.', ['@c' => $link, '@m' => 'projects']);
        drupal_set_message($message, 'warning');
    }
  
    return new \Symfony\Component\HttpFoundation\Response('', 204);
     
 }

 /**
 * Implements hook_form_alter().
 */
function ek_projects_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

    
}

/**
 * Implementation hook_theme().
 */
function ek_projects_theme() {
  return array(
      // default display
    'ek_projects_default' => array
    (
      'template' => 'ek_projects_default',
      'variables' => array('items' => array()),
    ),
    // for the dashboard
    'ek_projects_dashboard' => array
    (
      'template' => 'ek_projects_dashboard',
      'variables' => array('items' => array()),
    ),   
 
    // for the project items display
    'ek_projects_view' => array
    (
      'template' => 'ek_projects_view',
      'variables' => array('items' => array()),
    ), 
    //template for attached docs in project page  
    'ek_projects_doc_view' => array
    (
      'template' => 'ek_projects_doc_view',
      'variables' => array('items' => array()),
    ),       
    // for the project calendar block
    'calendar_block' => array
    (
      'template' => 'calendar_block',
      'variables' => array('items' => array()),
    ), 
    'activity_block' => array
    (
      'template' => 'activity_block',
      'variables' => array('items' => array()),
    ), 
  );     
}

/**
 * Implementation hook_mail().
 */
function ek_projects_mail($key, &$message, &$params) {
    
    $theme = theme_get_setting('logo');
    global $base_url;
    $params['options']['logo'] = $base_url . $theme['url'];
    $params['options']['site'] = \Drupal::config('system.site')->get('name');
    $params['options']['stamp'] = date('F j, Y, g:i a');
    
    switch($key) {
      case 'project_access':
        $message['subject'] = $params['subject'];
        $message['body'] = $params['body'];
        $message['options'] = $params['options'];
        break;

      case 'project_note':
        $message['subject'] = $params['subject'];
        $message['body'] = $params['body'];
        $message['options'] = $params['options'];
        break;

    }

}
  
/**
 * Implements hook_file_download().
 * edit the file_download function in order to control access of shared files
*/
function ek_projects_file_download($uri) {
    
    //filter uri for document type and source type
    //if extranet type, hook_ in use is extranet hook
    if( strpos($uri , '/projects/documents/') 
            &&  !strpos(\Drupal::request()->server->get('HTTP_REFERER') , '/extranet?')
            &&  !strpos(\Drupal::request()->server->get('HTTP_REFERER') , 'extranet-file/')) { 
           
    $finfo = new finfo(FILEINFO_MIME_TYPE);
    $mime = $finfo->file($uri);
    $query = "SELECT id, filename FROM {ek_project_documents}  WHERE uri = :uri";
    $a = array(':uri' => $uri);
    $name = \Drupal::currentUser()->getUsername();   

    $file = Database::getConnection('external_db', 'external_db')->query($query, $a)->fetchObject();

     if (ProjectData::validate_file_access($file->id) ) {

                //////////////////////////
                //    WATCHDOG          //
                //////////////////////////

                $a = array('@u' => $name, '@d' => $file->filename, '@i' => $file->id);
                $log = t("User @u has downloaded project document @d (file id @i)", $a);
                \Drupal::logger('ek_projects')->notice( $log );                
                return array('Content-Type' => $mime);

              }  else {
                    //////////////////////////
                    //    WATCHDOG          //
                    //////////////////////////
                    $a = array('@u' => $name, '@d' => $file->filename, '@i' => $file->id);
                    $log = t("User @u tried to downlaod project document @d but access is denied (file id @i)", $a);
                     \Drupal::logger('ek_projects')->notice( $log );  

                    return -1;          
              }
    }

}

/**
 * Implements hook_views_data().
 */

function ek_projects_views_data() {
   
    $data['ek_project']['table']['group'] = t('ek projects');
    $data['ek_project']['table']['base'] = array(
    'field' => 'id', // This is the identifier field for the view.
    'title' => t('ek projects main table'),
    'help' => t('Projects main table contains main project information'),
    'database' => 'external_db',
    'weight' => -11,
    );  
    $data['ek_project']['table']['join'] = array(
    // Index this array by the table name to which this table refers.
    // 'left_field' is the primary key in the referenced table.
    // 'field' is the foreign key in this table.
        'database' => 'external_db',
        'ek_project_description' => array(
          'left_field' => 'pcode',
          'field' => 'pcode',
          'database' => 'external_db',
        ), 
        'ek_project_finance' => array(
          'left_field' => 'pcode',
          'field' => 'pcode',
          'database' => 'external_db',
        ), 
    );
    
    $data['ek_project']['id'] = array(
        'title' => t('main project unique id'),
        'help' => t('main project unique id'),
        'field' => array('id' => 'numeric',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'numeric',),
    );
    
    $data['ek_project']['pname'] = array(
        'title' => t('name'),
        'help' => t('project given name'),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
        'argument' => array('id' => 'string',),
    );
    
    $data['ek_project']['client_id'] = array(
        'title' => t('client id reference'),
        'help' => t('reference from address book table'),
        'relationship' => array(
            'base' => 'ek_address_book', // The name of the table to join with
            'field' => 'client_id', // The name of the field to join with
            'id' => 'standard',
            'label' => t('Address book ref'),
            
          ),         
        'field' => array('id' => 'numeric',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'numeric',),
    ); 
    
    $data['ek_project']['cid'] = array(
        'title' => t('country id'),
        'help' => t('reference from country table'),
        'relationship' => array(
            'base' => 'ek_country', // The name of the table to join with            
            'id' => 'standard',
            'label' => t('countries table'),
            'handler' => 'views_handler_relationship',
            'field' => 'cid', 
            'base field' => 'id',
        ),        
        'field' => array('id' => 'numeric',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'numeric',),
    );
    $data['ek_project']['date'] = array(
        'title' => t('creation date'),
        'help' => t('creation date'),
        'field' => array('id' => 'date',),
        'sort' => array('id' => 'date',),
        'filter' => array('id' => 'date',),
    );
    
    $data['ek_project']['category'] = array(
        'title' => t('project category'),
        'help' => t('reference from project categories table'),
        'field' => array('id' => 'numeric',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'numeric',),
        'relationship' => array(
            'base' => 'ek_project_type', // The name of the table to join with            
            'id' => 'standard',
            'label' => t('categories table'),
            'handler' => 'views_handler_relationship',
            'field' => 'category', 
            'base field' => 'id',
        ),  
    ); 
    
    $data['ek_project']['pcode'] = array(
        'title' => t('project code'),
        'help' => t('project description'),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
        'argument' => array('id' => 'string',),
    ); 
    
    $data['ek_project']['status'] = array(
        'title' => t('status'),
        'help' => t('open, awarded, completed, closed'),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
        'argument' => array('id' => 'string',),
    );
    
    $data['ek_project']['level'] = array(
        'title' => t('level'),
        'help' => t('main or sub project'),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
        'argument' => array('id' => 'string',),
    ); 
    
    $data['ek_project']['subcount'] = array(
        'title' => t('number of sub projects'),
        'help' => t('number of sub projects'),
        'field' => array('id' => 'numeric',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'numeric',),
    ); 
    
    $data['ek_project']['priority'] = array(
        'title' => t('priority level'),
        'help' => t('0 to 3'),
        'field' => array('id' => 'numeric',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'numeric',),
    ); 
    
    $data['ek_project']['owner'] = array(
        'title' => t('project owner'),
        'help' => t('user id from users table'),
        'field' => array('id' => 'numeric',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'numeric',),
        /* relation to user should be limited to users_field_data.name only
         * @TODO
        
        'relationship' => array(
            'base' => 'users_field_data', // The name of the table to join with
            'field' => 'owner', // The name of the field to join with
            'base field' => 'uid',
            'id' => 'standard',
            'label' => t('Authenticated user'),
        ),  */       
    ); 
    
    $data['ek_project']['last_modified'] = array(
        'title' => t('last edition stamp'),
        'help' => t('unix timestamp'),
        'field' => array('id' => 'numeric',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'numeric',),
    );
    
    $data['ek_project']['share'] = array(
        'title' => t('list of users with share privileges'),
        'help' => t('comma separated list of user id from users table'),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
        'argument' => array('id' => 'string',),
    );  
    
    $data['ek_project']['deny'] = array(
        'title' => t('list of users with blocked access'),
        'help' => t('comma separated list of user id from users table'),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
        'argument' => array('id' => 'string',),
    );  
    
    $data['ek_project']['notify'] = array(
        'title' => t('list of users with update request'),
        'help' => t('comma separated list of user id from users table'),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
        'argument' => array('id' => 'string',),
    ); 
    
    $data['ek_project']['archive'] = array(
        'title' => t('archive status'),
        'help' => t('0 or 1'),
        'field' => array('id' => 'numeric',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'numeric',),
    );    
    
  $data['ek_project_description']['table']['group'] = t('ek projects description');

     $data['ek_project_description']['table']['base'] = array(
        'field' => 'pcode', // This is the identifier field for the view.
        'title' => t('ek projects description'),
        'help' => t('ek projects extended description.'),
        'weight' => -10,
        'database' => 'external_db',
     ); 

      $data['ek_project_description']['pcode'] = array(
        'title' => t('project code in description'),
        'help' => t('project code in description'),
        'relationship' => array(
            'base' => 'ek_project', // The name of the table to join with
            'field' => 'pcode', // The name of the field to join with
            'id' => 'standard',
            'label' => t('description data of project'),
        ),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
        'argument' => array('id' => 'string',),
        ); 
      
     $data['ek_project_description']['submission'] = array(
        'title' => t('submission date'),
        'help' => t('i.e. date of proposal'),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
        'argument' => array('id' => 'string',),
    );     
  
     $data['ek_project_description']['deadline'] = array(
        'title' => t('deadline date'),
        'help' => t('i.e. completion deadline date'),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
        'argument' => array('id' => 'string',),
    );  
  
     $data['ek_project_description']['start_date'] = array(
        'title' => t('start date'),
        'help' => t('i.e. start date'),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
        'argument' => array('id' => 'string',),
    );   
  
     $data['ek_project_description']['validation'] = array(
        'title' => t('validation date'),
        'help' => t('i.e. validation date'),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
        'argument' => array('id' => 'string',),
    );   
  
     $data['ek_project_description']['completion'] = array(
        'title' => t('completion date'),
        'help' => t('i.e. completion date'),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
        'argument' => array('id' => 'string',),
    );  
  
     $data['ek_project_description']['project_description'] = array(
        'title' => t('description'),
        'help' => t('description text'),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
        'argument' => array('id' => 'string',),
    );   
  
     $data['ek_project_description']['project_comment'] = array(
        'title' => t('comments'),
        'help' => t('comments text'),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
        'argument' => array('id' => 'string',),
    );

  $data['ek_project_finance']['table']['group'] = t('ek projects finance');

      $data['ek_project_finance']['table']['base'] = array(
        'field' => 'pcode', // This is the identifier field for the view.
        'title' => t('ek projects finance'),
        'help' => t('ek projects finance data'),
        'weight' => -10,
        'database' => 'external_db',
      ); 
      
      $data['ek_project_finance']['pcode'] = array(
        'title' => t('project code in finance'),
        'help' => t('project description in finance'),
        'relationship' => array(
            'base' => 'ek_project', // The name of the table to join with
            'field' => 'pcode', // The name of the field to join with
            'id' => 'standard',
            'label' => t('finance data of project'),
        ),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
        'argument' => array('id' => 'string',),
        );  
      
      $data['ek_project_finance']['payment_terms'] = array(
        'title' => t('payment terms'),
        'help' => t('payment terms'),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
        'argument' => array('id' => 'string',),
      );     
      $data['ek_project_finance']['currency'] = array(
        'title' => t('currency'),
        'help' => t('currency'),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
        'argument' => array('id' => 'string',),
      );  

      $data['ek_project_finance']['purchase_value'] = array(
        'title' => t('purchase value'),
        'help' => t('purchase value'),
        'field' => array('id' => 'numeric',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'numeric',),
      ); 
      $data['ek_project_finance']['tender_offer'] = array(
        'title' => t('proposed value'),
        'help' => t('proposed value'),
        'field' => array('id' => 'numeric',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'numeric',),
      );   
      $data['ek_project_finance']['project_amount'] = array(
        'title' => t('agreed value'),
        'help' => t('agreed value'),
        'field' => array('id' => 'numeric',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'numeric',),
      ); 
      $data['ek_project_finance']['discount_offer'] = array(
        'title' => t('discount value'),
        'help' => t('discount value'),
        'field' => array('id' => 'numeric',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'numeric',),
      );   
      $data['ek_project_finance']['down_payment'] = array(
        'title' => t('downpayment value'),
        'help' => t('downpayment value'),
        'field' => array('id' => 'numeric',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'numeric',),
      ); 
      $data['ek_project_finance']['payment'] = array(
        'title' => t('payment'),
        'help' => t('ayment'),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
        'argument' => array('id' => 'string',),
      );  
       $data['ek_project_finance']['offer_validity'] = array(
        'title' => t('offer validity date'),
        'help' => t('offer validity'),
        'field' => array('id' => 'date',),
        'sort' => array('id' => 'date',),
        'filter' => array('id' => 'date',),
      );   
       $data['ek_project_finance']['offer_deadline'] = array(
        'title' => t('offer deadline date'),
        'help' => t('offer validity'),
        'field' => array('id' => 'date',),
        'sort' => array('id' => 'date',),
        'filter' => array('id' => 'date',),
      );   

    $data['ek_project_type']['table']['group'] = t('ek projects types');

      $data['ek_project_type']['table']['base'] = array(
        'field' => 'id', // This is the identifier field for the view.
        'title' => t('ek projects types'),
        'help' => t('ek projects type description'),
        'weight' => -10,
        'database' => 'external_db',
      ); 
      
      
      $data['ek_project_type']['id'] = array(
        'title' => t('category unique id'),
        'help' => t('category unique id'),
        'field' => array('id' => 'numeric',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'numeric',),
        'relationship' => array(
            'base' => 'ek_project', // The name of the table to join with
            'field' => 'category', // The name of the field to join with
            'id' => 'standard',
            'label' => t('main project'),
        ),
    );    
      
      $data['ek_project_type']['type'] = array(
        'title' => t('category value'),
        'help' => t('category value'),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
      );        
      
      
      $data['ek_project_type']['short'] = array(
        'title' => t('category short name'),
        'help' => t('category short name'),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
      );       
      
      $data['ek_project_type']['comment'] = array(
        'title' => t('category comment'),
        'help' => t('category comment'),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
      );       
            
      $data['ek_project_type']['gp'] = array(
        'title' => t('category group'),
        'help' => t('category group'),
        'field' => array('id' => 'standard',),
        'sort' => array('id' => 'standard',),
        'filter' => array('id' => 'string',),
      );        
      
      
      
      
      
      
      
      
  return $data;
}

?>