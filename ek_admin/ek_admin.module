<?php

use Drupal\Core\Database\Database;
use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\StreamWrapper\PublicStream;
use Drupal\Core\Url;
use Drupal\Component\Utility\Xss;
use Drupal\ek_admin\Access\AccessCheck;
use Drupal\ek_admin\GlobalSettings;

/**
 * @file
 *  module . ek_admin
 */

/**
 * Implements hook__preprocess_page.
 * @param type $variables
 */
function ek_admin_preprocess_page(&$variables) {

    if ($variables['is_front']) {


        //verify proper setup of the external database
        //all data tables will be generated by the admin module outside from the system database
        // database is called by 'external_db' key in the settings files
        //1/ the external DB exist? check from the settings key

        try {
            $external = Database::getConnectionInfo('external_db');
            if (!empty($external)) {
                $db = TRUE;
            } else {
                $db = FALSE;
            }
        } catch (Exception $e) {
            
        }

        if ($db == FALSE) {

            $url = Url::fromRoute('ek_admin_ex_database', [], [])->toString();
            $m = t('<h2>Application setup is not yet done. Go <a href="@u">here</a> to start</h2>', ['@u' => $url]);
            \Drupal::messenger()->addError($m);
        } else {
            //$variables['page']['primary_menu']['#region'] = [];
            //$variables['#attached']['library'][] = 'ek_admin/frontpage'; 
        }
    }
}

/**
 * Implementation hook download.
 */
function ek_admin_file_download($uri) {

    if (strpos($uri ?? "", '/images')) {
        return array('Content-Type' => \Drupal::service('file.mime_type.guesser')->guessMimeType($uri));
    } elseif (strpos($uri ?? "", '/admin/company')) {
        $guesser = \Drupal::service('file.mime_type.guesser');
        $mime = $guesser->guessMimeType($uri);
        $query = "SELECT * FROM {ek_company_documents}  WHERE uri = :uri";
        $a = array(':uri' => $uri);

        $file = Database::getConnection('external_db', 'external_db')
                        ->query($query, $a)->fetchObject();
        $uid = \Drupal::currentUser()->id();
        $now = time();
        $name = \Drupal::currentUser()->getAccountName();
        $access = AccessCheck::GetCompanyAccess($file->coid);

        if (in_array($uid, $access[$file->coid]) && $file->deny == '0') {

            //user has access to company and no custom restriction
            //////////////////////////
            //    WATCHDOG          //
            //////////////////////////
            $a = array('@u' => $name, '@d' => $file->filename, '@i' => $file->id);
            $log = t("User @u has downloaded document @d (file id @i)", $a);
            \Drupal::logger('ek_admin')->notice($log);
            return array('Content-Type' => $mime);
        } elseif (in_array($uid, $access[$file->coid]) && $file->deny != '0') {

            //user has access but custom restriction are set
            $share = explode(',', $file->share);
            if (in_array($uid, $share)) {
                //////////////////////////
                //    WATCHDOG          //
                //////////////////////////
                $a = array('@u' => $name, '@d' => $file->filename, '@i' => $file->id);
                $log = t("User @u has downloaded document @d (file id @i)", $a);
                \Drupal::logger('ek_admin')->notice($log);
                return array('Content-Type' => $mime);
            }
        } else {
            //////////////////////////
            //    WATCHDOG          //
            //////////////////////////
            $a = array('@u' => $name, '@d' => $file->filename, '@i' => $file->id);
            $log = t("User @u tried to downlaod document @d but it is not shared or expired (file id @i)", $a);
            \Drupal::logger('ek_admin')->notice($log);

            return -1;
        }
    }
}

/**
 * Icon filter
 * Return true if file extension has corresponding icon.
 */
function ek_admin_filter_ico($extension) {

    $ico = ['ac3' => 'music', 'ai' => 'image', 'aiff' => 'audio', 'ani' => 'script', 'asf' => 'video', 'au' => 'audio', 'avi' => 'film',
        'bat' => 'file', 'bin' => 'file', 'bmp' => 'image', 'bup' => 'file', 'cab' => 'package', 'cal' => 'spreadsheet', 'cat' => 'txt',
        'csv' => 'txt', 'cur' => 'spreadsheet', 'dat' => 'db', 'dcr' => 'file', 'der' => 'txt', 'dic' => 'file', 'dll' => 'file',
        'doc' => 'doc', 'docx' => 'doc', 'dvd' => 'video', 'dwg' => 'file', 'dwt' => 'file', 'eml' => 'eml', 'fon' => 'txt',
        'gif' => 'picture', 'hlp' => 'file', 'html' => 'html', 'ico' => 'image', 'ifo' => 'file', 'inf' => 'file', 'ini' => 'file',
        'java' => 'file', 'jif' => 'picture', 'jpg' => 'jpg', 'jpeg' => 'jpg', 'log' => 'text-plain', 'm4a' => 'music', 'mmf' => 'msg',
        'mmm' => 'video', 'mov' => 'video', 'mp2' => 'music', 'mp2v' => 'video', 'mp3' => 'music', 'mp4' => 'film', 'mpeg' => 'video',
        'msp' => 'psd', 'no' => 'no', 'odp' => 'odp', 'ods' => 'ods', 'odt' => 'odt', 'pdf' => 'pdf', 'png' => 'png', 'ppt' => 'ppt',
        'pptx' => 'ppt', 'psd' => 'psd', 'ra' => 'music', 'rar' => 'package', 'reg' => 'db', 'rtf' => 'document', 'theme' => 'psd',
        'tiff' => 'picture', 'tlb' => 'file', 'ttf' => 'text-plain', 'txt' => 'txt', 'vob' => 'video', 'wav' => 'music',
        'wma' => 'video', 'wmv' => 'video', 'wpl' => 'video', 'wri' => 'document', 'xls' => 'xls', 'xlsx' => 'xls', 'xlm' => 'script',
        'zip' => 'zip'];

    if (file_exists(\Drupal::service('extension.path.resolver')->getPath('module', 'ek_admin') . '/art/ico/' . $ico[$extension] . ".png")) {
        return TRUE;
    }

    return FALSE;
}

/**
 * Implementation hook_theme().
 */
function ek_admin_theme() {
    return array(
        // default alert, access message
        'ek_admin_settings' => [
            'template' => 'ek_admin_settings',
            'variables' => array('items' => []),
        ],
        // login
        'ek_login' => [
            'template' => 'login',
            'variables' => array('items' => []),
        ],
        // default home
        'ek_admin_home' => [
            'template' => 'ek_admin_home',
            'variables' => array('items' => []),
        ],
        // default alert, access message
        'ek_admin_message' => [
            'template' => 'ek_admin_message',
            'variables' => array('items' => []),
        ],
        // for the company form
        'ek_admin_company_form' => [
            'template' => 'ek_admin_company_form',
            'variables' => array('items' => []),
        ],
        // for the country form
        'ek_admin_country_form' => [
            'template' => 'ek_admin_country_form',
            'variables' => array('items' => []),
        ],
        // for user access view
        'ek_admin_user_access' => [
            'template' => 'ek_admin_user_access',
            'variables' => array('items' => []),
        ],
        // for the documents
        'ek_admin_docs_view' => [
            'template' => 'ek_admin_docs_view',
            'variables' => array('items' => []),
        ],
        'ek_admin_list_docs_view' => [
            'template' => 'ek_admin_list_docs_view',
            'variables' => array('items' => []),
        ],
    );
}

/**
 * Implementation hook_mail().
 */
function ek_admin_mail($key, &$message, $params) {

    $site_config = \Drupal::config('system.site');
    $theme = theme_get_setting('logo');
    $params['options']['base_url'] = \Drupal::request()->getSchemeAndHttpHost();
    $params['options']['logo'] = $params['options']['base_url'] . $theme['url'];
    $params['options']['site'] = $site_config->get('name');
    $params['options']['stamp'] = date('F j, Y, g:i a');
    $site_mail = \Drupal::config('system.site')->get('mail');
    if (empty($site_mail)) {
        $site_mail = \Drupal::config('system.site')->get('mail_notification');
    }
    $message['headers']['Reply-To'] = $site_mail;

    switch ($key) {
        case 'test':
            $message['options'] = $params['options'];
            break;

        case 'attachment':
            $render = [
                '#markup' => $params['body'],
            ];
            $message['subject'] = $params['subject'];
            $message['body'][] = \Drupal::service('renderer')->render($render);
            $message['options'] = $params['options'];
            $message['files'][] = $params['files'];

            break;

        case 'tasks':
        case 'project_status':
        case 'sales_alert':
        case 'hr_date':
        case 'receipt':
        case 'client_reminder':

            $message['subject'] = $params['options']['subject'];
            $message['body'][] = $params['body'];
            $message['options'] = $params['options'];

            break;
    }
}



/**
 * Implementation hook_mail_alter().
 */
function ek_admin_mail_alter(&$message) {

    if (stristr($message['id'], 'user_')) {
        $site_config = \Drupal::config('system.site');
        $theme = theme_get_setting('logo');
        $params['options']['logo'] = \Drupal::request()->getSchemeAndHttpHost() . $theme['url'];
        $params['options']['site'] = $site_config->get('name');
        $params['options']['stamp'] = date('F j, Y, g:i a');
        $message['options'] = $params['options'];

        //Convert content for html mail
        $render = [
            '#markup' => nl2br($message['body'][0]),
        ];
        $message['body'][0] = \Drupal::service('renderer')->render($render);
    }
    
    if ($message['id'] == 'swiftmailer_test') {
        $site_config = \Drupal::config('system.site');
        $theme = theme_get_setting('logo');
        $params['options']['base_url'] = \Drupal::request()->getSchemeAndHttpHost();
        $params['options']['logo'] = $params['options']['url'] . $theme['url'];
        $params['options']['site'] = $site_config->get('name');
        $params['options']['stamp'] = date('F j, Y, g:i a');
        $message['options'] = $params['options'];
    }
    
    
}

/**
 * Implements hook_mailer_TYPE__SUBTYPE_PHASE
 * function invokeHooks(EmailInterface $email) in symfony_mailer/EmailFactory
 * email
 * theme_hook_original
 * attributes
 * title_attributes
 * content_attributes
 * title_prefix
 * title_suffix
 * db_is_active
 * is_admin
 * logged_in
 * user
 * directory
 * body
 * theme_hook_suggestions
 * theme_hook_suggestion
 * _parent
*/


function ek_admin_mailer_symfony_mailer__test_build(\Drupal\symfony_mailer\EmailInterface $email) {
    
    $site_name = \Drupal::config('system.site')->get('name');
    $theme = theme_get_setting('logo');
    $site_logo = \Drupal::request()->getSchemeAndHttpHost() . $theme['url'];
    $stamp = date('F j, Y, g:i a');
    $render = ['#markup' => "<p>Your mailer configuration is working.<p>"];
    $body = \Drupal::service('renderer')->render($render);
    $email->setVariable('site_name', $site_name)
      ->setVariable('site_logo', $site_logo)
      ->setVariable('stamp', $stamp)
      ->setVariable('base_url', \Drupal::request()->getSchemeAndHttpHost())
      ->setVariable('body', $body);
    $email->setSubject("Mailer configuration test");
}

function ek_admin_mailer_build(\Drupal\symfony_mailer\EmailInterface $email) {
    
    // default inputs for ALL custom symfony email
    $site_name = \Drupal::config('system.site')->get('name');
    $theme = theme_get_setting('logo');
    $site_logo = \Drupal::request()->getSchemeAndHttpHost() . $theme['url'];
    $stamp = date('F j, Y, g:i a');
    
    $email->setVariable('site_name', $site_name)
      ->setVariable('site_logo', $site_logo)
      ->setVariable('stamp', $stamp);    
    
}

/**
 * A file attachment email function used by EK modules (i.e. finance, sales)
 * with option to use swiftmailer library if available
 * @param $email: array of emails
 * @param $file: a file uri to be attached
 * @param $message: a text message to be added
 * $param $options: array of optional parameters
 */
function mail_attachment($email, $file, $message = null, $options = null) {

    $file_size = filesize($file);
    $send = '';
    $error = '';
    if (\Drupal::moduleHandler()->moduleExists('swiftmailer') || \Drupal::moduleHandler()->moduleExists('symfony_mailer')) {
        
        $params = [];
        $settings = new GlobalSettings(0);
        $receipt = $settings->get('mail_receipt');
        $currentuserMail = \Drupal::currentUser()->getEmail();
        if ($currentuserMail == NULL) {
            $dom = explode("/", $GLOBALS['base_url']);
            $currentuserMail = "no-reply@" . $dom[2];
        } else {
            $params['options']['from'] = $currentuserMail;
        }

        $filename_parts = explode('/', $file);
        $filenames = array_reverse($filename_parts); // Remove file basename.
        $filename = $filenames[0];

        // copy target file to local system file before attachment
        $filesystem = \Drupal::service('file_system');
        $filecopy = PublicStream::basePath() . "/" . $filename;
        $filesystem->copy($file, $filecopy, FileSystemInterface::EXISTS_REPLACE);

        $finfo = finfo_open(FILEINFO_MIME_TYPE);
        $attachments = new stdClass();
        $attachments->uri = $filecopy;
        $attachments->filename = $filename;
        $attachments->filemime = finfo_file($finfo, $filecopy);

        $params['files'][] = $attachments; // build files arrays for multiple attachments
        $params['subject'] = $filename;
        $params['body'] = nl2br(Xss::filter($message, ['p', 'br', 'li', 'ul']));
        $params['options']['user'] = $options['user'];
        $params['options']['filename'] = $filename;
        
        if (isset($options['stripe']) && $options['stripe'] == 1) {
            $params['options']['checkout'] = $options['checkout'];
        }
        if (isset($options['utrust']) && $options['utrust'] == 1) {
            $params['options']['checkout_utrust'] = $options['checkout_utrust'];
        }

        switch ($options['origin']) {
            case 'project_documents':
                $params['options']['origin'] = t('Project');
                $params['options']['pcode'] = $options['pcode'];
                break;
            case 'backup_documents':
                $params['options']['origin'] = t('Backup');
                break;
            case 'default':
            default:
                $params['options']['origin'] = t('Document');
                break;
        }

        $params['options']['stamp'] = date('F j, Y, g:i a');
        $params['options']['size'] = number_format($file_size / 1000, 0) . ' Kb';

        foreach ($email as $value) {
            if ($value != '') {
                //insert receipt log
                if ($receipt && $options['origin'] != 'backup_documents') {
                    $params['options']['receipt'] = "<img src='" . \Drupal::request()->getSchemeAndHttpHost() . "/ek_admin_receipt/mail"
                            . "?org=" . $currentuserMail . "&ts=" . time() . "&r=" . $value . "&c=" . $filename . "' class='receipt' style='width: 0px;height: 0px;' />";
                }
                if ($target_user = user_load_by_mail($value)) {
                    $target_langcode = $target_user->getPreferredLangcode();
                } else {
                    $target_langcode = \Drupal::languageManager()->getDefaultLanguage()->getId();
                }
                $m = \Drupal::service('plugin.manager.mail')->mail(
                        'ek_admin', 'attachment', trim($value), $target_langcode, $params, $currentuserMail, TRUE
                );

                if ($m) {
                    $send .= $value . ',';
                } else {
                    $error .= $value . ',';
                }
            }
        }

        // self copy
        if (isset($options['copy']) && $options['copy'] == 1) {
            if ($target_user = user_load_by_mail(\Drupal::currentUser()->getEmail())) {
                $target_langcode = $target_user->getPreferredLangcode();
            } else {
                $target_langcode = \Drupal::languageManager()->getDefaultLanguage()->getId();
            }
            $params['subject'] = "[copy]" . $params['subject'];
            \Drupal::service('plugin.manager.mail')->mail(
                    'ek_admin', 'attachment', \Drupal::currentUser()->getEmail(), $target_langcode, $params, $currentuserMail, TRUE
            );
        }

        unlink($filecopy);
        Return array('send' => $send, 'error' => $error);
    
    } else {
        // attachment
        // copy target file to local system file before attachment
        $filesystem = \Drupal::service('file_system');
        $filecopy = PublicStream::basePath() . "/" . $filename;
        $filesystem->copy($file, $filecopy, FileSystemInterface::EXISTS_REPLACE);
        $handle = fopen($filecopy, "rb");
        //When reading from anything that is not a regular local file, such as streams 
        //reading will stop after a packet is available. This means that 
        //should collect the data together in chunks 
        $content = '';
        while (!feof($handle)) {
            $content .= fread($handle, 8192);
        }
        fclose($handle);
        if ($content) {

            $filename_parts = explode('/', $filecopy);
            $filenames = array_reverse($filename_parts); // Remove file basename.
            $filename = $filenames[0];
            $content = chunk_split(base64_encode($content));

            $message = nl2br(Xss::filter($message));
            $sender = '';
            $finfo = finfo_open(FILEINFO_MIME_TYPE);
            $mime = finfo_file($finfo, $filecopy);
            switch ($options['origin']) {
                case 'project_documents':
                    $sender = $options['user'] . ' ' . t('sent you a document from project ref. @p.', ['@p' => $options['pcode']]);
                    break;
                case 'sales':
                    $sender = $options['user'] . ' ' . t('sent you a sales document.');
                    break;
                case 'memo':
                    $sender = $options['user'] . ' ' . t('sent you a finance memo document.');
                    break;
                case 'logistics':
                    $sender = $options['user'] . ' ' . t('sent you a logisitcs document.');
                    break;
            }
            $text = "<html>
                            <head><meta http-equiv='Content-Type' content='text/html; charset=UTF-8' /></head>
                                <body>
                                    <table>
                                        <tbody style='color:#2E2E2E;'>
                                            <tr>
                                                <td style='background-color:#D8D8D8;'>
                                                " . t('File attachment') . ": " . $filename . " (" . number_format($file_size / 1000, 0) . " Kb)</td>
                                            </tr>
                                            <tr><td>
                                                <span style='font-weight:bold;'>
                                                " . $sender . "
                                                </span></td>
                                            </tr>
                                             <tr>
                                                <td><span style='font-size:0.9em;'>
                                                " . $message . "
                                                </span></td>
                                            </tr>
                                            <tr>
                                                <td><span style='font-size:0.8em;'>" . date('F j, Y, g:i a') . "</span></td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </body>
                        </html>";

            $zid = md5(uniqid(time()));
            $headers = "From:" . \Drupal::currentUser()->getEmail() . "\r\n";
            $headers .= "MIME-Version: 1.0 \r\n";
            $headers .= "Content-Type: multipart/mixed; boundary=\"" . $zid . "\"\r\n";
            $headers .= "This is a multi-part message in MIME format.\r\n";
            $headers .= "--" . $zid . "\r\n";
            $headers .= "Content-type:text/html; charset=iso-8859-1 \r\n";
            $headers .= "Content-Transfer-Encoding: 7bit \r\n";
            $headers .= $text . "\r\n";
            $headers .= "--" . $zid . "\r\n";
            $headers .= "Content-Type: " . $mime . "; name=\"" . $filename . "\" \r\n";
            $headers .= "Content-Transfer-Encoding: base64 \r\n";
            $headers .= "Content-Disposition: attachment; filename=\"" . $filename . "\" \r\n";
            $headers .= $content . " \r\n";
            $headers .= "--" . $zid . "-- ";

            $title = t('File') . " " . $filename;
            foreach ($email as $value) {
                if ($value <> '') {
                    $mail = mail($value, $title, $text, $headers);
                    if ($mail == TRUE) {
                        $send .= $value . ',';
                    } else {
                        $error .= $value . ',';
                    }
                }
            }

            // self copy
            if ($options['copy'] == 1) {
                if ($target_user = user_load_by_mail(\Drupal::currentUser()->getEmail())) {
                    $target_langcode = $target_user->getPreferredLangcode();
                } else {
                    $target_langcode = \Drupal::languageManager()->getDefaultLanguage()->getId();
                }
                $params['subject'] = "[copy]" . $params['subject'];
                \Drupal::service('plugin.manager.mail')->mail(
                        'ek_admin', 'attachment', \Drupal::currentUser()->getEmail(), $target_langcode, $params, $currentuserMail, TRUE
                );
            }
        } else {
            $error = t('Cannot read file attachment. Please contact administrator');
        }

        unlink($filecopy);
        Return array('send' => $send, 'error' => $error);
    }
}

/**
 * Implements hook_form_ID_alter().
 * lock user edit for user 1
 */
function ek_admin_form_user_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

    if ($form['account']['mail']['#default_value']) {
        $edit = user_load_by_mail($form['account']['mail']['#default_value']);
        if ($edit && $edit->id() == 1 && \Drupal::currentUser()->id() != 1) {
            //only user 1 can edit user 1 role and status
            $form['account']['status']['#disabled'] = TRUE;
            $form['account']['roles']['#disabled'] = TRUE;
            $form['account']['mail']['#disabled'] = TRUE;
            $form['account']['name']['#disabled'] = TRUE;
        }
        if ($edit && \Drupal::currentUser()->id() != 1) {
            //remove default administrator
            unset($form['account']['roles']['#options']['administrator']);
        }

        if (\Drupal::currentUser()->id() != 1) {
            $form['contact']['#disabled'] = TRUE;
        }
        
        // insert options to subscribe to EK module alerts
        $form['alter_fields'] = [
            '#type' => 'fieldset',
            '#title' => t('Email alert subscriptions'),
            '#description' => t('Select which type of email you want to receive.'),
        ];

        
    }

    return $form;
}

/**
 * Implements hook_form_ID_alter().
 * user-register-form
 * add a notification copy for new account
 */
function ek_admin_form_user_register_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
    $form['actions']['submit']['#submit'][] = 'ek_admin_form_user_register_form_submit';
    return $form;
}

function ek_admin_form_user_register_form_submit(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
    // send an email copy on activation
    $values = $form_state->getValues();
    $params = [];
    $params['account'] = \Drupal\user\Entity\User::load($values['uid']);
    $notify = !$form_state->isValueEmpty('notify');
    $op = $notify ? 'register_admin_created' : 'register_no_approval_required';
    if ($op == 'register_admin_created') {
        $site_mail = \Drupal::config('system.site')->get('mail_notification');
        if (empty($site_mail)) {
            $site_mail = \Drupal::config('system.site')->get('mail');
        }
        if (empty($site_mail)) {
            $site_mail = ini_get('sendmail_from');
        }
        $params['subject'] = "[copy] account created";
        $email = \Drupal::currentUser()->getEmail();
        $lang = \Drupal::languageManager()->getDefaultLanguage()->getId();
        
        /* a copy will will be Bcc in accounts configuration settings; this form alteration should be disabled */

        // $mail = \Drupal::service('plugin.manager.mail')->mail('user', $op, $email, $lang, $params, $site_mail);
        /* $queue = \Drupal::queue('ek_email_queue');
            $queue->createQueue();
            $data['module'] = 'user';
            $data['key'] = $op;
            $data['params'] = $params;
            $data['email'] = $email;
            $data['lang'] = $lang;
            $queue->createItem($data);*/
        if ($mail) { 
            // \Drupal::messenger()->addWarning(t('A notification copy as been sent to @m', ['@m' => $email]));
            // \Drupal::logger('ek_admin')->notice(t('A notification copy as been sent to @m via @v', ['@m' => $email, '@v' => $site_mail]));
        }
    }
}

/**
 * Implements hook_form_alter().
 */
function ek_admin_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

    if ($form_id == 'user_multiple_cancel_confirm') {
        $form['#submit'][] = 'ek_admin_form_user_delete_submit';
        return $form;
    }

    if ($form_id == 'user_form') {
        $form['account']['current_status'] = [
            '#type' => 'hidden',
            '#value' => $form['account']['status']['#default_value'],
        ];
        $form['actions']['submit']['#submit'][] = 'ek_admin_form_user_form_submit';
        return $form;
    }

    if ($form_id == 'user_admin_permissions') {
        
    }
}

/**
 * Implements hook_form_submit().
 */
function ek_admin_form_user_form_submit(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
    $values = $form_state->getValues();
    if ($values['status'] == 1 && $values['current_status'] == '0') {
        // user unblocked
        $params = [];
        $params['account'] = \Drupal\user\Entity\User::load($values['uid']);
        $site_mail = \Drupal::config('system.site')->get('mail_notification');
        if (empty($site_mail)) {
            $site_mail = \Drupal::config('system.site')->get('mail');
        }
        if (empty($site_mail)) {
            $site_mail = ini_get('sendmail_from');
        }
        $params['subject'] = "[copy]  account unblocked";
        $email = \Drupal::currentUser()->getEmail();
        $lang = \Drupal::languageManager()->getDefaultLanguage()->getId();
        $mail = \Drupal::service('plugin.manager.mail')->mail('user', 'status_activated', $email, $lang, $params, $site_mail);
        if ($mail) {
            \Drupal::messenger()->addWarning(t('A notification copy as been sent to @m', ['@m' => $email]));
        }
    }
}

function ek_admin_form_user_delete_submit(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {

    if ($form['#form_id'] == 'user_multiple_cancel_confirm') {

        foreach ($form_state->getValue('accounts') as $key => $id) {
            /*
             * company table
             */
            $query = Database::getConnection('external_db', 'external_db')
                    ->select('ek_company', 'c');
            $query->fields('c', ['id', 'access']);
            $data = $query->execute();

            while ($d = $data->fetchObject()) {

                $list = explode(',', unserialize($d->access));
                $index = array_search($id, $list);
                if ($index !== false) {
                    unset($list[$index]);
                }
                $access = serialize(implode(",", $list));
                $update = Database::getConnection('external_db', 'external_db')->update('ek_company')
                        ->condition('id', $d->id)
                        ->fields(array('access' => $access))
                        ->execute();
            }

            /*
             * country table
             */
            $query = Database::getConnection('external_db', 'external_db')
                    ->select('ek_country', 'c');
            $query->fields('c', ['id', 'access']);
            $query->condition('access', '', '<>');
            $data = $query->execute();

            while ($d = $data->fetchObject()) {

                $list = explode(',', unserialize($d->access));
                $index = array_search($id, $list);
                if ($index !== false) {
                    unset($list[$index]);
                }
                $access = serialize(implode(",", $list));
                $update = Database::getConnection('external_db', 'external_db')->update('ek_country')
                        ->condition('id', $d->id)
                        ->fields(array('access' => $access))
                        ->execute();
            }
        }

        \Drupal::messenger()->addStatus(t('Access removed'));

        return $form;
    }
}
